- name: Create AWS VPC
  ec2_vpc_net:
    name: My VPC
    cidr_block: "{{ vpc_cidr_block }}"
    region: "{{ aws_region }}"
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    state: present
  register: my_first_vpc
  tags:
    - vpc
    - recipe2

- name: Create Public Subnet in VPC
  ec2_vpc_subnet:
    vpc_id: "{{ my_first_vpc.vpc.id }}"
    cidr: "{{ vpc_public_subnet_cidr }}"
    region: "{{ aws_region }}"
    az: "{{ aws_region }}a"
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    state:  present
    tags:
      Name: Public Subnet
  register: my_public_subnet
  tags:
    - vpc
    - recipe2

- name: Create Private Subnet in VPC
  ec2_vpc_subnet:
    vpc_id: "{{ my_first_vpc.vpc.id }}"
    cidr: "{{ vpc_private_subnet_cidr }}"
    region: "{{ aws_region }}"
    az: "{{ aws_region }}a"
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    state:  present
    tags:
      Name: Private Subnet
  register: my_private_subnet
  tags:
    - vpc
    - recipe2

- name: Create Internet Gateway
  ec2_vpc_igw:
    vpc_id: "{{ my_first_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    state: present
  register: my_first_igw
  tags:
    - vpc
    - recipe2

- name: Create NAT Gateway
  ec2_vpc_nat_gateway:
    if_exist_do_not_create: yes
    subnet_id: "{{ my_public_subnet.subnet.id }}"
    region: "{{ aws_region }}"
    state: present
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    wait: yes
  register: my_first_nat_gateway
  tags:
    - vpc
    - recipe2

- name: Create Route Table for Public Subnet
  ec2_vpc_route_table:
    vpc_id: "{{ my_first_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ my_first_igw.gateway_id }}"
    subnets:
      - "{{ my_public_subnet.subnet.id }}"
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    tags:
      Name: Public Subnet Route Table
  tags:
    - vpc
    - recipe2

- name: Create Route Table for Private Subnet
  ec2_vpc_route_table:
    vpc_id: "{{ my_first_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ my_first_nat_gateway.nat_gateway_id }}"
    subnets:
      - "{{ my_private_subnet.subnet.id }}"
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    tags:
      Name: Private Subnet Route Table
  tags:
    - vpc
    - recipe2

- name: Create EC2 Security Group
  ec2_group:
    name: my_first_sg
    description: A sample security group webservers
    vpc_id: "{{ my_first_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    aws_secret_key: "{{ secret_key }}"
    aws_access_key: "{{ access_key }}"
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 10.0.0.0/8
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0        
      - proto: icmp
        from_port: 8
        to_port:  -1
        cidr_ip: 10.0.0.0/8
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: my_first_sg
  tags:
    - security_group
    - recipe3

#Creating EC2 Key pair
- name: Create EC2 Key Pair
  ec2_key:
    name: my_first_key
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    key_material: "{{ key }}"
    region: "{{ aws_region }}"
    state: present
  tags:
    - ec2_instance
    - recipe4

- name: Create EC2 Instance in private subnet
  ec2:
    key_name: my_first_key
    instance_type: "{{ instance_type }}"
    image: "{{ ami_id }}"
    wait: yes
    group: my_first_sg
    vpc_subnet_id: "{{ my_private_subnet.subnet.id }}"
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    region: "{{ aws_region }}"
    count_tag:
      Name: Private Instance
    exact_count: "{{ private_instance_count }}"
    instance_tags:
      Name: Private Instance
  tags:
    - ec2_instance
    - recipe4

- name: Create EC2 Instance in public subnet
  ec2:
    key_name: my_first_key
    instance_type: "{{ instance_type }}"
    image: "{{ ami_id }}"
    wait: yes
    group: my_first_sg
    vpc_subnet_id: "{{ my_public_subnet.subnet.id }}"
    assign_public_ip: yes
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    region: "{{ aws_region }}"
    count_tag:
      Name: Public Instance    
    exact_count: "{{ public_instance_count }}"
    instance_tags:
      Name: Public Instance
  register: ec2_public_instance
  tags:
    - ec2_instance
    - recipe4

#Creating and attaching EIPs to instance
- name: Allocate Elastic IP and associate it with an instance
  ec2_eip:
    device_id: "{{ item }}"
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    region: "{{ aws_region }}"
  with_items:
    - "{{ ec2_public_instance.instance_ids }}"
  register: elastic_ip
  tags:
    - elastic_ip
    - recipe5

##Attaching EC2 volume to Public Instance created
- name: Create EBS volume and attach to Instance
  ec2_vol:
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    region: "{{ aws_region }}"
    instance: "{{ item }}"
    volume_size: 10
    name: Public Instance
    device_name: /dev/xvdf
  with_items: "{{ ec2_public_instance.instance_ids }}"
  register: ec2_vol
  tags:
    - ebs_volume
    - recipe6

- name: Create AMI of Public Instance Created
  ec2_ami:
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    region: "{{ aws_region }}"
    instance_id: "{{ item }}"
    wait: yes
    name: first_ami
    no_reboot: yes
    tags:
      Name: First AMI
  with_items:
    - "{{ ec2_public_instance.instance_ids }}"
  register: image
  tags:
    - ami
    - recipe7


- name: Create ELB in public subnet
  ec2_elb_lb:
    state: present
    name: first-elb
    security_group_ids: "{{ my_first_sg.group_id }}"
    region: "{{ aws_region }}"
    subnets: "{{ my_public_subnet.subnet.id }}"
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    purge_subnets: yes
    listeners:
    - protocol: http
      load_balancer_port: 80
      instance_port: 80
  register: my_first_elb
  tags:
    - elb
    - recipe8

- name: Get all running ec2 instances with given tags
  ec2_remote_facts:
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    aws_region: "{{ aws_region }}"
    filters:
      instance-state-name: running
      "tag:Name": Private Instance
  register: ec2_instances_private
  tags:
    - elb
    - recipe8

- name: Register all private instances with elb created
  ec2_elb:
    instance_id: "{{ item.id }}"
    ec2_elbs: first-elb
    state: present
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    aws_region: "{{ aws_region }}"    
  with_items:
    - "{{ ec2_instances_private.instances }}"
  ignore_errors: yes
  tags:
    - elb
    - recipe8

- name: Deregister all private instances with elb created
  ec2_elb:
    instance_id: "{{ item.id }}"
    ec2_elbs: first-elb
    state: absent
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    aws_region: "{{ aws_region }}"    
  with_items:
    - "{{ ec2_instances_private.instances }}"
  ignore_errors: yes
  tags:
    - elb
    - recipe8

#AutoScaling
- name: Create Launch Configuration
  ec2_lc:
    region: "{{ aws_region }}"
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    name: my_first_lc
    image_id: "{{ ami_id }}"
    key_name: my_first_key
    instance_type: "{{ instance_type }}"
    security_groups: "{{ my_first_sg.group_id }}"
    instance_monitoring: yes
  tags:
    - autoscaling
    - recipe9

- name: Create Auto Scaling group
  ec2_asg:
    name: my_first_asg
    region: "{{ aws_region }}"
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    load_balancers:
      - first-elb
    launch_config_name: my_first_lc
    min_size: 1
    max_size: 5
    desired_capacity: 3
    vpc_zone_identifier:
      - "{{ my_private_subnet.subnet.id }}"
    tags:
      - environment: test
  tags:
    - autoscaling
    - recipe9

- name: Configure Scaling Policies (scale-up)
  ec2_scaling_policy:
    region: "{{ aws_region }}"
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    name: scale-up policy
    asg_name: my_first_asg
    state: present
    adjustment_type: ChangeInCapacity
    min_adjustment_step: 1
    scaling_adjustment: +1
  register: scale_up_policy
  tags:
    - autoscaling
    - recipe9

- name: Configure CloudWatch Metric for Scaling Up Policy
  ec2_metric_alarm:
    state: present
    region: "{{ aws_region }}"
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    name: "scale-up-metric"
    description: "This alarm notify auto scaling policy to step up instance"
    metric: "CPUUtilization"
    namespace: "AWS/EC2"
    statistic: "Average"
    comparison: ">="
    threshold: 60.0
    unit: "Percent"
    period: 300
    evaluation_periods: 3
    dimensions:
      AutoScalingGroupName: "my_first_asg"
    alarm_actions: 
      - "{{ scale_up_policy.arn }}"
  tags:
    - autoscaling
    - recipe9

- name: Adding Elastic IP to the phonebook-infra
  add_host: 
    hostname: "{{ item.public_ip }}"
    groups: phonebook-infra
  with_items: "{{ elastic_ip }}"
  tags:
    - deployment
    - recipe10
